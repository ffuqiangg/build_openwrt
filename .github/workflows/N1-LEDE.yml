name: N1-LEDE

on:
  workflow_dispatch:
  repository_dispatch:
    types:
      - N1-LEDE

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Show system
      run: |
        echo -e "üí¨ Server information \n"
        echo -e "üíª Server running on Ubuntu: [ Release: $(cat /etc/os-release | grep VERSION_CODENAME | cut -d '=' -f2) / Host: $(arch) ] \n"
        echo -e "üßÆ Server CPU configuration information: \n$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "üíæ Server memory usage: \n$(free -h) \n"
        echo -e "üóÉÔ∏è Server space usag: \n$(df -hT ${GITHUB_WORKSPACE}) \n"

    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 512
        root-reserve-mb: 4608
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'

    - name: Checkout
      uses: actions/checkout@v4

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) 2>/dev/null
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache clang cmake cpio \
          curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 \
          libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev libreadline-dev \
          libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip \
          python3-ply python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
          upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        df -h

    - name: Prepare source code
      run: |
        sudo chown -R runner:runner /home/runner/work/build_openwrt
        echo "build_date=$(date +%Y.%m.%d)" >> ${GITHUB_ENV}
        cp -r ./scripts/lede/. ./
        ./01_prepare_source_code.sh
        distrib_revision=$(grep 'DISTRIB_REVISION=' openwrt/package/lean/default-settings/files/zzz-default-settings | sed -E "s/.*'(.+)'.*/\1/")
        echo "distrib_revision=${distrib_revision}" >> ${GITHUB_ENV}

    - name: Prepare package
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        cp -r ../scripts/lede/. ./
        ./02_prepare_package.sh
        echo -e "\n LEDE-${{ env.distrib_revision }} \033[33m|\033[0m ${{ env.build_date }}\n" > ./files/etc/banner

    - name: Make config
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        cp ../config/lede/config.seed .config
        make defconfig

    - name: Download package
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        make -j$(nproc) || make -j1 || make -j1 V=s

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      with:
        name: OpenWrt_rootfs_${{ env.build_date }}
        path: openwrt/bin

    - name: Organize files
      run: |
        if [[ "${{ github.event_name }}" == 'repository_dispatch' ]]; then
          echo "prerelease_symbol=false" >> ${GITHUB_ENV}
          sed -i '1,/cutline/d' ./doc/release.md
        else
          echo "prerelease_symbol=true" >> ${GITHUB_ENV}
          sed -i '/cutline/,$d' ./doc/release.md
        fi
        rm -rf ./artifact/
        mkdir -p ./artifact/
        mv openwrt/bin/targets/amlogic/mesongx/*sysupgrade.img* ./artifact/
        mv openwrt/bin/targets/amlogic/mesongx/packages ./artifact/
        cd ./artifact/
        zip N1-LEDE-${{ env.distrib_revision }}-${{ env.build_date }}-sfs.zip *n1*squashfs*
        zip -r N1-LEDE-${{ env.distrib_revision }}-${{ env.build_date }}-packages.zip packages/

    - name: Upload firmware to release
      uses: ncipollo/release-action@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ env.build_date }}
        allowUpdates: true
        replacesArtifacts: true
        prerelease: ${{ env.prerelease_symbol }}
        artifacts: ./artifact/*.zip
        bodyFile: ./doc/release.md

    - name: Telegram notification
      if: github.event_name == 'repository_dispatch'
      run: |
        firmware_num="$(curl -fsSL https://github.com/ffuqiangg/build_openwrt/releases/expanded_assets/${{ env.build_date }} | grep -oE "N1-.*.zip" | sort -u | wc -l)"
        MSG="
        *${{ env.build_date }}* Âõ∫‰ª∂ÁºñËØëÂÆåÊàê
        https://github.com/ffuqiangg/build\_openwrt/releases/tag/${{ env.build_date }}
        "
        if [[ "${firmware_num}" == 7 ]]; then
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}&parse_mode=MarkDown&disable_web_page_preview=false"
        fi
